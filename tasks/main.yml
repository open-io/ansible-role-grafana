---
- include_role:
    name: openio-service
  vars:
    openio_service_type: "oio-grafana"
    openio_service_namespace: "{{ openio_grafana_namespace }}"
    openio_service_maintenance_mode: "{{ openio_grafana_maintenance_mode }}"
    openio_service_packages:
      - oio-grafana
    openio_service_directories:
      - path: "{{ openio_service_conf_dir }}/provisioning"
      - path: "{{ openio_service_conf_dir }}/provisioning/dashboards"
      - path: "{{ openio_service_conf_dir }}/provisioning/dashboards/openio"
      - path: "{{ openio_service_conf_dir }}/provisioning/datasources"
      - path: "{{ openio_service_conf_dir }}/provisioning/notifiers"
      - path: "{{ openio_service_volume }}"
    openio_service_configuration_files:
      - name: grafana.ini
      - name: provisioning/dashboards/openio.yml
      - name: provisioning/dashboards/openio/diagnostics.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/filesystem-connector.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/health.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/network.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/openio-services.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/openio-system.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/overview.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/software-version-info.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/storage.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/system.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/accounts.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/loki-logs-by-txid.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/dashboards/openio/loki-logs-by-services.json
        block_start_string: '§%'
        block_end_string: '%§'
        variable_start_string: '§!!'
        variable_end_string: '!!§'
      - name: provisioning/datasources/prometheus.yaml
      - name: provisioning/datasources/loki.yaml
      - name: provisioning/datasources/elasticsearch.yaml

    openio_service_services:
      - command: >-
          /usr/share/oio-grafana/bin/grafana-server
          -config {{ openio_service_conf_dir }}/grafana.ini
          -homepath /usr/share/oio-grafana

    openio_service_checks:
      - uri:
          url: "http://{{ openio_grafana_bind_address }}:{{ openio_grafana_bind_port }}/api/health"
        until: "'json' in _return and _return.json.database | d('nok') == 'ok'"
        retries: 10
        delay: 2

- name: Ensure OpenIO folder exist
  uri:
    url: "http://{{ openio_grafana_bind_address }}:{{ openio_grafana_bind_port }}/api/folders/openio"
    user: "{{ openio_grafana_user }}"
    password: "{{ openio_grafana_password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  register: _folder
  when:
    - not openio_grafana_maintenance_mode | bool
  tags: configure
  failed_when: "_folder is failed or 'json' not in _folder or _folder.json.uid != 'openio'"
  ignore_errors: "{{ ansible_check_mode }}"

- name: Ensure OpenIO dashboards exists
  uri:
    url: "{{ openio_grafana_url }}/api/search?type=dash-db&folderIds={{ _folder.json.id }}"
    user: "{{ openio_grafana_user }}"
    password: "{{ openio_grafana_password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  register: _dashboards
  when:
    - not openio_grafana_maintenance_mode | bool
  tags: configure
  vars:
    _path: "templates/provisioning/dashboards/openio/"
    is_loki: "{{ (openio_loki | d(false)
                  and openio_grafana_loki_group | length > 0
                  and openio_grafana_loki_group in groups
                  and groups[openio_grafana_loki_group] | length > 0) }}"
    nb_loki_to_remove: "{{ 0 if is_loki
                        else
                        lookup('fileglob', _path ~ '/loki-*.json.j2').split(',') | length }}"
    nb_dashboards: "{{ lookup('fileglob', _path ~ '/*.json.j2').split(',') | length }}"
  failed_when: "_dashboards is failed
    or 'json' not in _dashboards
    or  _dashboards.json | length != (nb_dashboards | int - nb_loki_to_remove | int)"
  ignore_errors: "{{ ansible_check_mode }}"

- name: Update preferences
  uri:
    url: "http://{{ openio_grafana_bind_address }}:{{ openio_grafana_bind_port }}/api/user/preferences"
    user: "{{ openio_grafana_user }}"
    password: "{{ openio_grafana_password }}"
    method: PUT
    status_code: 200
    body_format: json
    force_basic_auth: true
    body: "{ 'homeDashboardId': {{ _dashboards.json | selectattr('title', 'match','^Overview$')
           | map(attribute='id') | list | first | int }}, \"timezone\": \"\", \"theme\": \"\"}"
  when:
    - not openio_grafana_maintenance_mode | bool
  tags: configure
  ignore_errors: "{{ ansible_check_mode }}"

...
