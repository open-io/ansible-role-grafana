---
- name: Include per distro vars
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags:
    - install
    - configure

- name: Include per distro tasks
  include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
  tags: install

- name: Ensure directories
  file:
    path: "{{ item }}"
    owner: grafana
    group: grafana
    mode: 0755
    state: directory
  with_items:
    "{{ openio_grafana_paths.values() | list }}"
  tags: configure

- name: Configure
  template:
    src: "grafana.ini.j2"
    dest: "{{ openio_grafana_paths['conf'] | realpath }}/grafana.ini"
    owner: grafana
    group: grafana
    mode: 0644
  register: _grafana_conf
  tags: configure

- name: Overwrite systemd unit
  template:
    src: "grafana-server.service.j2"
    dest: "/usr/lib/systemd/system/grafana-server.service"
    owner: root
    group: root
    mode: 0644
  register: _grafana_systemd
  tags: configure

- name: Reload daemon
  systemd: daemon_reload=yes
  when: ansible_virtualization_type != 'docker'
  tags: configure

- name: Provision - datasources
  template:
    src: "prometheus.yaml.j2"
    dest: "{{ openio_grafana_paths['datasources'] | realpath }}/prometheus.yaml"
    owner: grafana
    group: grafana
    mode: 0644
  register: _grafana_datasources
  tags: configure

- name: Provision - dashboards
  copy:
    src: "{{item}}.json"
    dest: "{{ openio_grafana_paths['dashboards'] | realpath }}/{{ item }}.json"
    owner: grafana
    group: grafana
    mode: 0644
    backup: true
  with_items: "{{ openio_grafana_dashboards + (['filesystem_connector'] if openio_grafana_oiofs_hosts else []) }}"
  register: _grafana_dashboards
  tags: configure

- name: Provision - dashboard config
  template:
    src: "openio.yml.j2"
    dest: "{{ openio_grafana_paths['dashboards'] | realpath }}/openio.yml"
    owner: grafana
    group: grafana
    mode: 0644
  register: _grafana_dashboard_conf
  tags: configure

- name: Provision - defaults
  template:
    src: "grafana_defaults.j2"
    dest: "{{ openio_grafana_defaults_path }}"
    owner: grafana
    group: grafana
    mode: 0644
  register: _grafana_defaults
  tags: configure

- name: Ensure grafana is started and enabled
  systemd:
    daemon_reload: true
    name: "grafana-server"
    state: "restarted"
    enabled: "{{ openio_grafana_service_enabled }}"
  when:
    - _grafana_conf is changed or _grafana_datasources is changed or _grafana_dashboards is changed or
      _grafana_dashboard_conf is changed or _grafana_defaults is changed
    - not openio_grafana_provision_only
  tags: configure

- name: Ensure the service is started
  uri:
    url: "http://{{ openio_grafana_bind_address}}:{{ openio_grafana_bind_port }}/api/health"
    status_code: 200
  register: _status
  retries: 10
  delay: 2
  until: _status is success and _status.json.database == "ok"
  tags: configure

- name: Ensure all dashboards are loaded
  uri:
    url: http://{{ openio_grafana_bind_address }}:{{ openio_grafana_bind_port }}/api/search
    user: "{{ openio_grafana_user }}"
    password: "{{ openio_grafana_password }}"
    method: GET
    force_basic_auth: true
    status_code: 200
  register: _dashboards
  when:
    - not openio_grafana_provision_only
  tags: configure
  until: (_dashboards.json) | length >= (openio_grafana_dashboards | length) + (1 if openio_grafana_oiofs_hosts else 0)
  retries: 3
  delay: 5
  ignore_errors: "{{ ansible_check_mode }}"

- name: Update preferences
  uri:
    url: http://{{ openio_grafana_bind_address }}:{{ openio_grafana_bind_port }}/api/user/preferences
    user: "{{ openio_grafana_user }}"
    password: "{{ openio_grafana_password }}"
    method: PUT
    status_code: 200
    body_format: json
    force_basic_auth: true
    body: "{ \"homeDashboardId\": {{ _dashboards.json | selectattr('title', 'match','^Overview$')
| map(attribute='id') | list | first | int }}, \"timezone\": \"\", \"theme\": \"\"}"
  when:
    - not openio_grafana_provision_only
  tags: configure
  ignore_errors: "{{ ansible_check_mode }}"
...
